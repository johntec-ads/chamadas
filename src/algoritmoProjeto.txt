1 - Resetar os estilos - index.css

CRIANDO PROJETO:
2 - Configurar navegação de páginas:
  a - pasta assets para imagens.
  b - pasta SignIn (login).
  c - pasta SignUp (Cadastro).

CRIANDO ROTAS:
3 - Bibliotécas:
  a - npm instal react-router-dom
  b - pasta routes.
  c - Component RoutesApp
    c.1 - import Routes e Route dom
    react-router-dom.
  d - Component App 
    d.1 import BrouserRouter do RRD e 
    o component RoutesApp.
    d.2 Roteando e renderizando Component RouterApp 
    com BrowserRouter

TELA DE LOGIN:
4 - Component SignIn
  a - criar style.css
  b - 
  c - importar img logo
  d - importar useState para os valores dos inputs.
  e - Criação dos estados 'state'.'password e email'
  f - Configuração dos inputs.
  g - importar Link do ReactRouterDom.
  h - estilizar o component.
  
  TELA DE REGISTRO
5 - Componet signUp
  a - import img Logo
  b - copia codigo SignIn
  c - copia signin.css
  d - copia input para Nome.
  e - edita codigo.

  CRIA COMPONENTE DASHBOARD
6 - Dentro de pages
  a - Cria pasta Dashboard.
  b - cria index.js.
  c - cria Component Dashboard

  FIREBASE CONFIG.
7 - Pasta services
  a - Cria firebaseConections.js
  b - Cria novo projeto firebase.
  c - import a cont firebaseConfig p/
  firebaseConection.js .
  d - Realiza os import de :
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { Firestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';


  CADASTRO E LOGIN
8 - SignUp
  a - Atribui ao element de formulário 'form'
   um evento de  onSubmit={} 
    1.0 Cria function "handleSubmit(e)" para submiter
    o formulário à executar algo.
    1.2 Atribuo a function ao onSubmit={handleSubmit}
    1.3 e.prenventDefault()
    1.4 If se name, email e password
    estão diferentes de vazio.

    CRIANDO CONTEXT API
9 - contextapi:
    a -  Dentro de src, cria-se uma pasta 
    contexts ,dentro da pasta criamos o arquivo
    auth.js .
  b - import {useState, createContext,
  useEffect} from 'react' .
  c - Inicializar e  exportar o contexto
  com um objeto vazio.
  d -  Criar um component 'AuthProvider'
  que será o provedor de contexto
  através do parametro  filho 'children'.
  (return in)
  e - Passa um value ao AuthContext.Provider, 
  para receber as proprs necessárias 
  e repassa-las em seguida
  (return out)
  f - Cria a state user,
  g - Dentro do value, cria-se uma propriedade 
  'signed' que verifica "!!user" e convert o valor 
  para true/false, se user estiver logado
  ou não;

COMPONENT App
10 - Importar o contexto AuthProvider
  a -  Envolver as rotas 'RoutesApp' com o 
  'AuthProvider'

contextApi:
11 - Criando function de login "signIn"
que recebe os param email e password.
  a -  exporto a function através do "value" 
  dentro do  <AuthContext.Provider>.

COMPONENT SignIn
12 - import do arquivo auth da pasta 
  contexts
  a -  function handleSingIn para login com 
  email e password

CADASTRAR USUÁRIO:
13 - AUTH.JS
  1 - Criar metodo signUp que 
  recebe como param, email, password,
  name. 
  2 - Importa-lo no AuthContext.Provider.
  
14 - COMPONENT SignUp
  1 - Import{useContext} do 'react'
  2 - Import{AuthContext} do arquivo 'auth'
  3 - Declara useContext e importa
  o metodo signUp do auth.js
  4 - Atribui o signUp ao metodo hundleSubmit
  com os parametros, email, password e name.

AUTH.JS
15 - lOADING DE ESPERA
  1 - Declara useState(loadingAuth)
  2 - import firebase{auth, db}
  3- import createUserWithEmailAndPassword do 'firebase/auth'
  4 - import doc, getDoc, setDoc do 'firebase/firestore'
  
  SignUp Cadastro
  5 - Acrescenta o async ao metodo sugnUp
  6 - State setLoadingAuth recebe true informando
  o inicio do Cadastro
  7 - wait createUserWithEmailAndPassword(authm
  email, senha)
  8 - Promise retorna o value com os dados
  do user.
  


