1 - Resetar os estilos - index.css

CRIANDO PROJETO:
2 - Configurar navegação de páginas:
  a - pasta assets para imagens.
  b - pasta SignIn (login).
  c - pasta SignUp (Cadastro).

CRIANDO ROTAS:
3 - Bibliotécas:
  a - npm instal react-router-dom
  b - pasta routes.
  c - Component RoutesApp
    c.1 - import Routes e Route dom
    react-router-dom.
  d - Component App 
    d.1 import BrouserRouter do RRD e 
    o component RoutesApp.
    d.2 Roteando e renderizando Component RouterApp 
    com BrowserRouter

TELA DE LOGIN:
4 - Component SignIn
  a - criar style.css
  b - 
  c - importar img logo
  d - importar useState para os valores dos inputs.
  e - Criação dos estados 'state'.'password e email'
  f - Configuração dos inputs.
  g - importar Link do ReactRouterDom.
  h - estilizar o component.
  
  TELA DE REGISTRO
5 - Componet signUp
  a - import img Logo
  b - copia codigo SignIn
  c - copia signin.css
  d - copia input para Nome.
  e - edita codigo.

  CRIA COMPONENTE DASHBOARD
6 - Dentro de pages
  a - Cria pasta Dashboard.
  b - cria index.js.
  c - cria Component Dashboard

  FIREBASE CONFIG.
7 - Pasta services
  a - Cria firebaseConections.js
  b - Cria novo projeto firebase.
  c - import a cont firebaseConfig p/
  firebaseConection.js .
  d - Realiza os import de :
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { Firestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';


  CADASTRO E LOGIN
8 - SignUp
  a - Atribui ao element de formulário 'form'
   um evento de  onSubmit={} 
    1.0 Cria function "handleSubmit(e)" para submiter
    o formulário à executar algo.
    1.2 Atribuo a function ao onSubmit={handleSubmit}
    1.3 e.prenventDefault()
    1.4 If se name, email e password
    estão diferentes de vazio.

    CRIANDO CONTEXT API
9 - contextapi:
    a -  Dentro de src, cria-se uma pasta 
    contexts ,dentro da pasta criamos o arquivo
    auth.js .
  b - import {useState, createContext,
  useEffect} from 'react' .
  c - Inicializar e  exportar o contexto
  com um objeto vazio.
  d -  Criar um component 'AuthProvider'
  que será o provedor de contexto
  através do parametro  filho 'children'.
  (return in)
  e - Passa um value ao AuthContext.Provider, 
  para receber as proprs necessárias 
  e repassa-las em seguida
  (return out)
  f - Cria a state user,
  g - Dentro do value, cria-se uma propriedade 
  'signed' que verifica "!!user" e convert o valor 
  para true/false, se user estiver logado
  ou não;

COMPONENT App
10 - Importar o contexto AuthProvider
  a -  Envolver as rotas 'RoutesApp' com o 
  'AuthProvider'

contextApi:
11 - Criando function de login "signIn"
que recebe os param email e password.
  a -  exporto a function através do "value" 
  dentro do  <AuthContext.Provider>.

COMPONENT SignIn
12 - import do arquivo auth da pasta 
  contexts
  a -  function handleSingIn para login com 
  email e password

CADASTRAR USUÁRIO:
13 - AUTH.JS
  1 - Criar metodo signUp que 
  recebe como param, email, password,
  name. 
  2 - Importa-lo no AuthContext.Provider.
  
14 - COMPONENT SignUp
  1 - Import{useContext} do 'react'
  2 - Import{AuthContext} do arquivo 'auth'
  3 - Declara useContext e importa
  o metodo signUp do auth.js
  4 - Atribui o signUp ao metodo hundleSubmit
  com os parametros, email, password e name.

AUTH.JS
15 - lOADING DE ESPERA
  1 - Declara useState(loadingAuth)
  2 - import firebase{auth, db}
  3- import createUserWithEmailAndPassword do 'firebase/auth'
  4 - import doc, getDoc, setDoc do 'firebase/firestore'
  
  SignUp Cadastro
  5 - Acrescenta o async ao metodo sugnUp
  6 - State setLoadingAuth recebe true informando
  o inicio do Cadastro
  7 - wait createUserWithEmailAndPassword(auth
  email, senha)
  8 - Promise retorna o value com os dados
  do user.
  10 - await doc(db,"users,uid)... 
  11 - .then recebe um objeto com 
  as informações do 
     user{uid: uid,
          nome: name,
          email: value.user.email,
          avatarUrl: null,
          }, para usar através da 
          state user, os dados do novo
          usuário cadastrado.
          Exportou o loadingAuth pelo value.
  .catch...
  SignUp
  1 - Atribui o loadingAuth ao useContext
  2 - Tranforma o hudleSubmit em async e 
  o signUp ainda na function adiciona o 
  wait.
  3 - Criar uma renderização condicional
  dentro do botão.

  APOS CADASTRO,REDIRECIONAR PARA DASHBOARD
  1 - import do RRD o useNavigate
  2 - Declara a const navigate obtendo
   o Hook useNavigate()
  3 - Stância o navigate('/dashboard) dentro do metodo signUp
  4 - function storageUser para salvar 
  os dados do user no localStorage .
  5 - Stanciando dentro do signUp, abaixo do
  setUser(), o storageUser(data)

LOGANDO USUÁRIO
  SignIn
1 -  Import do firebase/auth o signInWithEmailAndPassword
 Ao click do user
2 - Invoca no signIn setLoadingAuth(true)
3 - async-await signInWithEmailAndPassword(auth,email,password)

CRIANDO ROTAS PRIVADAS
1 - Na pasta routes cria-se Pirvate.js
2 - Imports de (useContext-react/
Navigate-rrd/
AuthContext-context/auth)
  3 - Criar o component Private, com o param filho({children})
  4 - Importar o Private para o component de rotas (RoutesApp)
  5 - Envolver com a tag <Private> a tag <Dashboard>
   6 - Importar signed do useContext,para verificar
   se user logado é true or false.
   7 - Aplicando condicional para logar na dashboard

   CRIANDO TELA DE LOUDING
   1 - Dentro de auth.js vamos criar uma state loading declarada como true.
   2 - Aplica o loading dentro do value.
   PRIVATE 
   importa o loading dentro do useContext e 
   faz uma comparação , se loading for true, renderiza 
   um div em branco.

   PERMANECER LOGADO 
   auth.js
   1 - Aplicando ciclo de vida , useEffect
   2 - Dentro do useEffect, vamos resgatear o localStorage
   3 - setUser obtem os dados do localStorage, convertido para 
   objeto novamente com JSON.parse

   METODO PARA LOGOUT
   4 - Criando metodo para logout.
   5 - importar do firebase/auth o metodo signOut

   DASHBOARD
   1 - import useContext do react
   2 - import AuthContext do context/auth
   3 - Aplica o useContext dentro do component
   Dashboard, e import o metodo logout do auth.js
    
    CRIANDO A HEADER
    1 - Criando component HEADER
    2 - importando para a Dashboard o component Header
    3 - importando avatarImg para a Header
    4 - import link do react-router-dom
    5 - import context verificar se user de tem img
    6 - import AuthContext do auth.js
    7 - Consumir o context...e fazer comparação para import img
    8 - Instalar a Bibliotéca react-icons
    9 - Import de FiHome, FiUser, FiSettings de react-icons
    10- import e ediçao de styles/responsividade 
  
  Component title:
    1 - Dentro de pages, criar a pasta Profile com seu index.js e seu style
    profile.css.
    2 - Dentro de components, criar o component Profile com seu style
    3 - Importar para o Route, e adicionar camada Private.
    4 - Dentro de components, criar o component Title e seu style
    5 - Criar className title
    6 - Editar o style
    7 - importar o Title para o Profile
    8 - Adicionar uma className content para a div do Title
    9 - Import do react-icons FiSettings
    10- Importar para o component Title os dados do Profile, através do children

CRIANDO PERFIL
    1 - Em Profile criar um div/className='container' e um form
    2 - Importar o avatar.png e icon FiUpload
    3 - Criar div-form-label-input para consumir icon e subir arquivo img
    4 - Import dos Hooks react para declarar useContext e useState
    5 - Import do AuthContext e consumir auth
    6 - Editar o style profile.css
BUSCANDO DADOS DO PERFIL
A - Trocar Imagem , enviar dados do input para o firebase
    1 - No context auth.js Exportar a function storageUser,para usa-la em 
    quaisquer component, adicionando-a dentro do AuthContext.Provider.
    2 - É preciso atualizar os dados do user: Exportar o component user 
    atravéz do AuthContext.Provider.

    3 - No Profile index.js, consumir os dados exportado,  adicionando os 
    components storageUser e setUser, para o metodo AuthContext  .
    4 - No Profile, declarar as useStates, nome e email, que irão receber
    os dados do objetos declarados no context auth.js.
    5 - Atualizar os input nome e email, com as state declaradas, e os dados
    que passarem nos inputs, irão atualizar as states.
    6 - Adicionar no AuthContext.Provider o metodo logout.
    7 - Inserir no button o metodo onCLick com uma função anônima, e 
        adicionar o logout na função.
    8 - Subir image. No input de type file, adicionar um onChange com uma nova
    função, onChange{handleFile}
    9 - Criar a função handleFile, e em seu escopo, adicionar um if que verifica
    se e.target.files[0] contém um arquivo image/jpeg || ou image/png.
    Obs:O files é uma propriedade do objeto target que faz parte do evento disparado 
    por um elemento <input type="file"> em HTML. 
    10 - Declarar uma useState de imageAvatar para armazenar o arquivo validado pela 
    condicional : setImageAvatar(image).
    11 - Converter o arquivo image com o metodo setAvatarUrl(URL.createObjectURL(image))
    que em seguida será armazenado na state setAvatarUrl.
  ATUALIZAR DADOS E ENVIAR PARA O FIREBASE
    1 - Em pages/Profile/index: Dentro do form onde se encontra o botão salvar, vamos
    criar um manipulador de eventos de formulários onSubmit={handleSubmit}.
    2 - Na função já criada, vamos verificar em uma condicional, se o user esta apenas
    digitando apenas o nome, ou também editando foto.
    3 - Import do firebase/firestore e import do firebaseConections e
    Salvar dados no firebase.

    CADASTRANDO NOVO CLIENTE.
    1 - Dentro de pages, declarar Customers/index.js
    2 - Importar Header
    3 - Importar Title e seus filhos(children,name)
    4 - Importar lib {FiUser} react-icons/fi
    5 - Importar Customer para a routes com rota privada usando o Private
    6 - Na criação do forms, vamos usar os mesmos estilos do Profile, repetindo
    a className, criar e repetir os inputs para nome, cnpj e endereço.
    7 - Import o useState e criar as states para nome, cnpj e endereco.
    8 - Declarar uma function handleResgister por onSubmit para o form,
     com a className 'form-profile' para aproveitar os estilos.
    9 - Declarar a function handleRegister usando e.preventDefault para prevenir
    o comportamento, pois ela .
    10 - Dentro da function hundleRegister, faremos um verificação condicional,
    se nome, cnpj e endereço são diferente de vazio, a function segue o código.
    11 - Import do firebase/firestore com os metodos addDoc e collection.
    12 - Dentro o if, vamos cadastrar uma nova colection.
    13 - Após a entrada dos dados, retornar as states vazias e um toast.success

DESENVOLVENDO DASHBOARD
    1 - Criar a dashboard.css
    2 - Import do dashboard.css e do component Title
    4 - No return instanciar className'content' e o component Title
    5 - Importar os icones 'react-icons/fi' COM O FiPlus e FiMessageSquare
    6 - Declarar um frimet <> </> e adicionar a div className='container'
    7 - importar o react-route-dom Link, e nele adicionar className'new',
     e um icone FiPlus.
    8 - Estilizar dashboard.css
    9 - Adicionar mais uma classe ao container "dashboard"
    10 - Trocar a div container por uma table"tabela"
    11 - Import dos icones 
    12 - Estilizar a tabela

PÁGINA NOVO CHAMADO
    1 - Em pages, criar a pasta New e seu index.
    2 - importar os components Header e Title e o estilo new.css
    3 - Declara no return a Header, uma nova div com a className content
    para reaproveitar o estilo, e o Title com o elemento name Novo CHAMADO
    4 - Importar o react-icons/fi com o FiPlusCircle.
    5 - Chamar o components New em nossas rotas.
    Criando os inputs e reaproveitar o estilo dos formulários.
    6 - Dentro do return, declarar uma nova div,reaproveitar a className container
    , declarar um form e reaproveitar a className form-profile, e seguir com 
    os formulários.
    7 - Estilizar o component new.
    8 - Declarar as useSates para armazenar os dados.
      A useState customers é para o campo clientes, e recebera uma array de clientes
      que inicia vazia, e que vai buscar do banco de dados quando for executada.
      A useState assunto, tem início com o primeiro item do Assunto que é Suporte
      A useState status, tem início com o primeiro item do status, que é Aberto
    9 - Complementar os elementos com um value seguido de um onChange que recebe os 
    valores através de uma função anônima. onChange{(e) =>setState(e.target.valeu)}
    10 - Em status vamos verificar o valor com checked={true}, e criar uma function
    onChange={handleOptionChange}, ao qual é atribuida para todos os inputs,E
    recebe os valores com setStatus(e.target.value).
    11 - Criar uma condicional para o checked em cada input.
    checked={status === 'Atendido,'}, e atribui-la para todos os inputs, conforme
    seu valor
    12 - Buscando dados dos clientes: Iniciando com a label assunto,cria-se a 
    função handleChangeSelect, que recebe o evento cadas vez que a select tiver 
    alteração, e atualiza a state setAssunto com o select selecionado.
    13 - Busca dos clientes cadastrados no banco de dados.
    14 - Import do useEffect para o ciclo de vida, que ao abrir a página, seja 
    feita a busca dos clientes no banco de dados.
    15 - Declara a usaState loadCustomer que inicia com true.
    16 - Importar o context, buscando o AuthContext
    17 - importar o firebase e importar o firestore
    18 - Declarar o useEffect .Criar uma async function loadCustomers(){}
    dentro da useEffect para buscar o banco de dados, e já deixar a function 
    instanciada.
    19 - Percorre o docs buscando o id e ref, e adiciona para useState customers
    que recebe nossa lista de cliêntes.
    20 - Vamos criar uma condicão no snapshot para verficar se o array 
    esta vazio, caso esteja será preenchido com o cliente fictício FREELA.
    se obtiver os dados, atualiza a setCustomers com a lista de dados.
    21 - Vamos atrelar a lista obtida ao label Cliente, em sua select de 
    key e value;
    22 - Declarar nova useState customerSelected, para receber o item Customer 
    selecionado, e inicia na posição 0, iniciando pelo primeiro da lista
    23 - Em seguida, adicionar ao select, um onChange{handleChangeCustomer},e 
    e declarar a funcão.
    24 - Vamos atualizar a setCustomerSelected(e.target.value) com o evento
    25 - Vamos percorrer nossa lista com customers.map

  CADASTRANDO NOVA COLEÇÃO NO BANCO DE DADOS
    1 - Dentro do return, no form de className='form-profile', adicionamos
    um onSubmit(handleRegister)
  ATUALIZAR CHAMADOS NA DASHBOARD
    1 - page/Dashboard/index: Vamos apagar o segundo elemento
    de <tr>
    2 - Importar useEffect e useState: Declarar os estados
    chamados para armazenar o mesmo, e loading para mostar
    que esta carregando.
    3 - Criar uma renderização condicionar para verificar se tem 
    ou não algum chamado.
    4 - Após renderizar e estilizar , vamos agora buscar os
    chamados: Criar o useEffect
    5 - Dentro do useEffect vamos criar a function assincrona
    async function loadChamados(){}
    6 - Na function vamos percorrer nosso array de chamados,para isso vamos importar 
    import{ collection, getDocs, orderBy, limit, startAfter, query } from 'firebase/firestore'
    7 - import { db } from '../../services/firebaseConections'
    8 - Na function vamos criar uma query para buscar uma lista 
    ordenada e com limite em quantidade desta lista
    9 - Criamos a referencia const listRef = collection(db, 'chamados');
    10 - Criamos um função externa para buscar o querySnapshot, que foi a 
    variável que recebeu todos dos documentos.
    11 - Renderização duplicando:
    Retirar o 
    <React.StrictMode>
    <App />
    </React.StrictMode>
    deixando somente o <App />. ou abaixo do const querySnapshot, atualizar a state para vazio. 
    /* Recebendo todos os docs */
        const querySnapshot = await getDocs( q )
        setChamados([]);
    Obs: o <React.StrictMode> roda somente em desenvolvimento, não roda em build de produção.
    12 - Criando uma condicional para o loading renderizar buscando chamados.

  BOTÃO PARA BUSCAR MAIS CHAMADOS.
    1 - useState lastDocs para verificar qual o último item, e loadingMore para 
    mensagem de buscando.
    2 - 
     


    
      












   

